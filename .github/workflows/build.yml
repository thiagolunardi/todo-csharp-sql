name: Build
run-name: Building ${{ github.repository }} by ${{ github.actor }}

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4        
        with:
          ref: ${{ github.head_ref }} # checkout the correct branch name
          fetch-depth: 0 # fetch the whole repo history

      - uses: codacy/git-version@2.8.0
        id: version        
        with:
          release-branch: main
          prefix: v

      - name: Tag the repository        
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"
          git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
          git push --tags
        if: github.ref == 'refs/heads/main'
          
  backend-build-and-test:
    needs: versioning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true
          cache-dependency-path: ./src/**/packages.lock.json

      - name: Restore packages
        run: dotnet restore ./src/Todo.Api.sln --locked-mode

      - name: Build
        run: dotnet build ./src/Todo.Api.sln --no-restore --configuration Release

      - name: Test
        run: dotnet test ./src/Todo.Api.sln --no-restore --no-build --configuration Release --logger trx --results-directory "TestResults"
        if: github.ref != 'refs/heads/main'

      - uses: actions/upload-artifact@v4
        with:
          name: dotnet-test-results
          path: TestResults
        if: github.ref != 'refs/heads/main'

      - name: Publish
        run: dotnet publish ./src/api/Todo.Api.csproj --no-restore --no-build --configuration Release --output ./publish
        if: github.ref == 'refs/heads/main'

      - name: Upload dotnet artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api
          path: ./publish
        if: github.ref == 'refs/heads/main'

  frontend-build-and-test:
    needs: versioning
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/web

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
          cache-dependency-path: ./src/web

      - name: Build and Test
        run: |
          npm ci
          npm run lint
          npm run build

      - uses: actions/upload-artifact@v4
        with:
          name: web
          path: ./src/web/dist
        if: github.ref == 'refs/heads/main'

  backend-lint:
    needs: versioning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0

      - uses: github/super-linter@v6
        env:
          DEFAULT_BRANCH: "main"
          VALIDATE_ALL_CODEBASE: "false"
          VALIDATE_YAML: "true"
          VALIDATE_CSHARP: "true"
          VALIDATE_JAVASCRIPT_ES: "true"
          VALIDATE_TYPESCRIPT_ES: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    if: github.ref != 'refs/heads/main'

  dependency-review:
    needs: versioning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/dependency-review-action@v4
        with:
          comment-summary-in-pr: always
          base-ref: main
          head-ref: main
    if: github.ref != 'refs/heads/main'

  code-security-check:
    needs: versioning
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: csharp
            build-mode: none
          - language: javascript-typescript
            build-mode: none
    steps:
      - uses: actions/checkout@v4

      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
    if: github.ref != 'refs/heads/main'

  build-docker-image:
    needs: [versioning, backend-build-and-test, frontend-build-and-test]
    runs-on: ubuntu-latest
    env:
      version: ${{ needs.versioning.outputs.version }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: app
          merge-multiple: false

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ github.repository }}:${{ env.version }}
            ${{ github.repository }}:latest
