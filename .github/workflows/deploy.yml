name: deploy
run-name: Deploy ${{ github.repository }} to ${{ inputs.environment}} by ${{ github.actor }}

on:  
  workflow_call:
    inputs:
      version: 
        required: true
        type: string
      environment:
        required: true
        type: string

env:
  DOCKER_IMAGE_VERSION: '${{ vars.DOCKER_CONTAINER_REGISTRY }}/${{ github.repository }}:${{ inputs.version }}'  

jobs:
  deploy-to-azure:
    name: Azure
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - name: Validate environment input
      run: |
        if [[ "${{ inputs.environment }}" != "Production" && "${{ inputs.environment }}" != "Staging" ]]; then
          echo "Invalid environment: ${{ inputs.environment }}. Allowed values are 'Production' or 'Staging'."
          exit 1
        fi

    - name: Deploy Docker to Azure
      id: deploy-docker-to-azure
      uses: azure/webapps-deploy@v3
      with:        
        app-name: ${{ vars.AZURE_WEBAPP_NAME }}
        resource-group-name: ${{ vars.AZURE_RESOURCE_GROUP }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        images: ${{ env.DOCKER_IMAGE_VERSION }}

  deploy-to-aws:
    name: AWS
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ vars.AWS_ECS_TASK_DEFINITION }}
          container-name: ${{ vars.AWS_CONTAINER_NAME }}
          image: ${{ env.DOCKER_IMAGE_VERSION }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        timeout-minutes: 3
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ vars.AWS_ECS_SERVICE }}
          cluster: ${{ vars.AWS_ECS_CLUSTER }}
          wait-for-service-stability: true

  deploy-to-gcp:
    name: GCP
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }} 
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: google-github-actions/auth@v2
        id: 'auth'      
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ vars.GCP_GKE_CLUSTER }}
          location: ${{ vars.GCP_GKE_REGION }}
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - uses: google-github-actions/deploy-gke@v0
        with:
          image: ${{ env.DOCKER_IMAGE_VERSION }}
          app_name: ${{ github.repository }}
          region: ${{ vars.GCP_GKE_REGION }}
          cluster_name: ${{ vars.GCP_GKE_CLUSTER }}
          project_id: ${{ vars.GCP_PROJECT_ID }}
